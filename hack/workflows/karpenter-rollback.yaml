apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  namespace: argo-workflows
  generateName: karpenter-rollback-
  annotations:
    workflows.argoproj.io/description: |
      This workflow rollback from karpenter to nodegroups
spec:
  podMetadata:
    annotations:
      karpenter.sh/do-not-disrupt: "true"
  ttlStrategy:
    secondsAfterCompletion: 600 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
  automountServiceAccountToken: true
  serviceAccountName: argo-workflow
  entrypoint: rollback
  arguments:
    parameters:
    - name: cluster
      value: argocon-1
  templates:
  - name: rollback
    inputs:
      parameters:
      - name: cluster
    steps:
    - - name: get-nodegroups
        template: get-nodegroups
        arguments:
          parameters:
          - name: cluster
            value: "{{inputs.parameters.cluster}}"
    - - name: rollback
        template: rollback-nodegroup
        arguments:
          parameters:
          - name: nodegroup_name
            value: "{{item}}"
          - name: cluster
            value: "{{inputs.parameters.cluster}}"
        withParam: "{{steps.get-nodegroups.outputs.result}}"


  - name: get-nodegroups
    inputs:
      parameters:
      - name: cluster
    script:
      image: csantanapr/python-argocon:1.6
      command: [python]
      source: |
        cluster = "{{inputs.parameters.cluster}}"

        import boto3
        import sys
        import json
        from sharedlib import infra

        session = boto3.Session()
        eks = session.client('eks')
        nodegroups = []
        for nodegroup_name in infra.get_eks_cluster_nodegroups(eks, cluster):
          if infra.get_custom_object(nodegroup_name, "NodePool") is None:
            continue
          nodegroups.append(nodegroup_name)

        json.dump(nodegroups, sys.stdout)

  - name: rollback-nodegroup
    inputs:
      parameters:
      - name: nodegroup_name
      - name: cluster
    steps:
    - - name: scale-up
        template: scale-up-nodegroup
        arguments:
          parameters:
          - name: nodegroup_name
            value: "{{inputs.parameters.nodegroup_name}}"
          - name: cluster
            value: "{{inputs.parameters.cluster}}"
    - - name: delete-karpenter
        template: delete-karpenter
        arguments:
          parameters:
          - name: nodegroup_name
            value: "{{inputs.parameters.nodegroup_name}}"
          - name: cluster
            value: "{{inputs.parameters.cluster}}"


  - name: scale-up-nodegroup
    inputs:
      parameters:
      - name: nodegroup_name
      - name: cluster
    script:
      image: csantanapr/python-argocon:1.6
      command: [python]
      source: |
        nodegroup_name = "{{inputs.parameters.nodegroup_name}}"
        cluster = "{{inputs.parameters.cluster}}"

        import boto3
        import sys
        from sharedlib import infra

        # Get the scaling config from karpenter annotations
        k8s_karpenter_node_pool = infra.get_custom_object(nodegroup_name, "NodePool")
        min_size = int(k8s_karpenter_node_pool['metadata']['annotations']['migrate.karpenter.io/min'])
        max_size = int(k8s_karpenter_node_pool['metadata']['annotations']['migrate.karpenter.io/max'])
        desired_size = int(k8s_karpenter_node_pool['metadata']['annotations']['migrate.karpenter.io/desired'])

        session = boto3.Session()
        eks = session.client('eks')

        print("Updating nodegroup " + nodegroup_name, file=sys.stderr)
        print("min_size="+str(min_size), file=sys.stderr)
        print("max_size="+str(max_size), file=sys.stderr)
        print("desired_size="+str(desired_size), file=sys.stderr)
        infra.update_nodegroup(
            eks,
            clusterName=cluster,
            nodegroupName=nodegroup_name,
            scalingConfig={
                'desiredSize': desired_size,
                'minSize': min_size,
                'maxSize': max_size
            }
        )
        print("Scaling up autoscaler ", file=sys.stderr)
        infra.scale_deployment("cluster-autoscaler-aws-cluster-autoscaler", "kube-system", 1)

  - name: delete-karpenter
    inputs:
      parameters:
      - name: nodegroup_name
      - name: cluster
    script:
      image: csantanapr/python-argocon:1.6
      command: [python]
      source: |
        nodegroup_name = "{{inputs.parameters.nodegroup_name}}"
        cluster = "{{inputs.parameters.cluster}}"

        import sys
        from sharedlib import infra

        print("Deleting NodePool"+nodegroup_name, file=sys.stderr)
        infra.delete_custom_object(nodegroup_name, "NodePool")

        print("Deleting NodeClass for nodegroup "+nodegroup_name, file=sys.stderr)
        infra.delete_custom_object(nodegroup_name, "EC2NodeClass")
